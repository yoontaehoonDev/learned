*클래스 문법
 - 접근제어
  - public(default)
   - protected
   - private

 - 메소드
  - 생성자 (클래스명() { ... };
  - 클래스메소드 (static void m() { ... } -> 호출 -> 클래스명.메소드명();
  - 인스턴스메소드 (void m() { ... } -> 호출 -> 레퍼런스.메소드명();

 - 블록
  - 스태틱 블록
   - static { ... }
  - 인스턴스 블록
   - { ... }

 - 변수(field)
  - 클래스 필드 (static int size;)
   - 클래스 로딩할 때 생성됨
  - 인스턴스 필드
   -

*클래스 로딩
*.class [ 필드선언, 생성자, 메소드, 스태틱블록, 인스턴스블록 ]
 -> Loading -> [JVM] -> 메모리 -> Method Area[필드선언, 메소드, 생성자] [Heap] [Stack]
 - 로딩을 해서 적절한 장소에 배치를 해야 사용하기 편리하다.
 - int i; <- JVM에게 int유형의 메모리를 준비하라고 내리는 명령어

*JVM 메모리 관리 영역
 - [Method Area]
  - 로딩된 클래스를 배치
  - static 변수를 생성

 - [Heap]
  - new 명령으로 생성된 변수(인스턴스 변수)

 - [Stack]
  - 메소드를 호출할 때 로컬 변수

*Method Area
 - Code Segment = 명령어
 - Data Segment = 변수

*Heap 과 Stack
 - 클래스의 설계도에 따라 변수를 준비한다
 - 인스턴트 필드(변수)

 - 모든 명령 코드는 Method Aread에서 실행된다.
 - 스태틱 필드 or 클래스 필드는 Area에 만들어진다.
 - 로컬 필드는 Stack에 만들어진다.
 - 인스턴트 필드는 Heap에 만들어진다.

*가비지(Garbage)
 - 주소를 잃어버려 사용할 수 없는 인스턴스

*11단계
 - 스태틱 필드 사용[LENGTH], [boards], [size]
 - 복사를 하면 배열이 따로 필요해짐
*12단계
 - 인스턴스 필드 사용


- 학습 목표 달성 확인 목록
	- [] 클래스 로딩이 무엇인지 설명할 수 있는가?
	- [] 스태틱 필드와 인스턴스 필스의 생성 시점을 이해하는가?
	- [] Method Area와 Heap, Stack 메모리 영역의 쓰임새를 이해하는가?
	- [] 가비지가 무엇인지 설명할 수 있는가?
	- [] 스태틱 필드의 쓰임새를 아는가?
	- [] 인스턴스 필드의 쓰임새를 아는가?
	- [] 인스턴트 메소드의 쓰임새를 아는가?
	- [] 












