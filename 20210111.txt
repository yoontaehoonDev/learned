*인코딩과 디코딩

가 -> AC00(문자코드)
2진수화 시켜서 unicode = ucs = ISO10646 = utf-16BE로 변환

Data  ---------------> 특정코드 --------------------> 원래 Data
	encode			decode
	암호화			복호화
	 압축			
         JPEG, MPEG

Ex) 영상 Data -> avi, mp4

encode + decode = codec(코덱)
인코딩 또는 디코딩을 처리하는 S/W, H/W

인코딩된 영상 파일을 Player가 사용하려면,
인코딩때 사용된 방식의 프로그램이 있어야 디코딩됨으로 실행 가능함.

*APP에서 H/W 사용하려면?

A -> AC00 -> JVM -> OS <-(I/O)-> [컴퓨터[그래픽카드]] -> 모니터
문자를 인코딩해서 JVM에서 디코딩한 다음, OS에서 실행하고, 컴퓨터로 신호를 보냄

어떠한 경우에도 프로그램은 바로 하드웨어에 접근할 수 없다
따라서, 운영체제를 거쳐서 실행하게 된다.

OS가 H/W를 제어를 못 해서, 하드웨어 조정 소프트웨어(Driver)를 내장함
			 - OS에서 제시한 규칙에 따라 작성한다.

*Driver S/W 와 OS

컴퓨터 내부에 그래픽카드, Lan카드, USB 등등 장치들을 실행하려면,
Driver가 필요하며, 이 Driver는 OS에 맞춰 실행된다.
따라서, 게임으로 예를 들면, Windows에선 오버워치가 실행 가능하지만,
Mac에서는 Driver가 없으므로 실행이 불가능함.

*문자출력과 폰트

문자	  코드	          call
 가 -----> AC00 ---> App -----> OS --------> GPU --------> 모니터
			      
OS에서 디코딩된 코드를 내부에서 폰트를 찾고 폰트에 맞춰 출력함.

*래스터(raster) 폰트 와 벡터(vector) 폰트

1. 래스터 방식 = 픽셀 Data
	- Ex) 래스터 폰트, 비트맵.
	- 크기를 키우면 계단현상 발생

	- 장점 : 출력 속도가 빠르다
	- 단점 : 픽셀을 그대로 출력

2. 벡터 방식 = 명령 Data (좌표)
	- Ex) 벡터 폰트 = toue type 폰트
	- Ex) 클립아트(PPT), 캐드
	- 매번 명령에 따라 그리기 때문에
	  크기를 키워도 계단 현상이 없다.

	- 장점 : 정확하게 출력한다.
	- 단점 : 출력속도가 느리다.

*Java 원시 타입

byte(1byte), short(2byte), int(4byte), long(8byte)
float(4byte), double(8byte)
boolean(4byte) 배열일 경우 1byte
char(2byte)

문자열 "asdf" -> 객체


*줄바꿈 코드

0D -> Carrage Return (CR)
0A -> Line Feed (LF)

Windows OS에서는 줄바꿈 코드로 0D0A 2byte를 사용한다
	- 옛날 타자기의 구동 원리에서 가져왔다.

Linux/macOS/Unix OS에서는 0A 1byte를 사용한다

/r을 사용하면 커서 위치로 되돌아와서 덮어쓰기 하며 출력한다


값 -> 2진수화
정수 -> 2의 보수
부동소수점 -> 가수부 - Sign_Magnitude / 지수부 - Excess-K
문자 -> Unicode


*변수
- 값을 저장하는 메모리
- 데이터타입 변수명;

*변수 선언
- 메모리를 준비시키는 명령
- int a; -> 정수값을 담을 4byte 메모리를 준비시킨다.
- a = 100; -> 메모리에 값을 저장하라는 연산자(명령) 
[실제로 들어가는 값은 2진수 값] [0000 0000 0000 0000 0000 0000 0110 0100]

- l-value 는 항상 변수여야 한다.
- r-value 는 항상 변수 or 리터럴 or 값을 리턴하는 명령(expression) 이여야 한다.

statement = println()
expression = 연산 수행하는 함수, return 값 - Ex : System.out.println(이 부분);

★메모리 크기가 다르면 컴파일 오류가 난다.
	Ex : int형 데이터에 long형 데이터 넣기

*부동소수점 과 변수

float f : [부동비트(1)][지수부(8)][가수부(23)] <- 4byte
	- 유효자릿수는 7자리(단정도) 이므로, 8자리가 넘어가면 정밀도가 낮아짐

double d : [비동비트(1)][지수부(11)][가수부(52)] <- 8byte
	- 유효자릿수는 13자리(배정도) 이므로, 14자리가 넘어가면 정밀도가 낮아짐
 
*레퍼런스 와 메소드

Date d1 = new Data() -> [현재날짜]
d1 = [현재날짜 주소]

Date d2= d1;
d2 = [d1의 현재날짜 주소]

d1.setData(22);
d1 = 값이 들어있는 메소드의 주소 = reference
setDate = d1이 가리키는 메모리의 값을 다루는 연산자 = method(Operator)
method = 레퍼런스 세계에서는 메소드가 연산자 역할을 한다

주소를 안 가리키게 하려면 null 치환

*배열 인스턴스와 가비지

int[] arr1 = new int[5];
200번지[][][] 생성
arr1[200번지주소] -> 배열 참조
그리고 arr[1] = new int[] {200,200,200}; = (400번지주소) 을 선언하면,
기존에 있던 배열을 참조하는 arr1[200번지주소]가 소멸되고,
arr1[400번지주소]가 된다.

for(int item : arr) = item에 arr[start] 부터 arr[end]까지 치환한다.
단, 반복횟수는 무조건 배열의 끝까지.

배열의 최대개수는 타입 상관없이 약21억개이다

- 학습 목표 달성 확인 목록
	- [] 컴파일 할 때 -encoding 옵션을 붙여야 하는 경우와 그 이유를 아는가?
	A : Windows에서는 기본적으로 MS949 charset을 사용하기 때문에
	    컴파일을 할 때, 소스파일을 MS949로 인식해서 UTF-8으로 인코딩
	    명령을 해야 한다.
	- [] 인코딩과 디코딩을 설명할 수 있는가?
	A : 인코딩은 압축을 하고, 압축을 풀 때는 디코딩
	- [] 폰트가 무엇이고 언제 사용되는지 알고 있는가?
	- [] 래스터 방식 폰트와 벡터 방식 폰트의 구동 원리를 설명할 수 있는가?
	A : 래스터 방식은 점을 찍는 형태, 벡터 방식은 명령으로 그리는 형태
	- [] JVM에서 문자를 다루는 방식을 아는가?
	- [] 변수가 무엇인지 설명할 수 있는가?
	A : 값을 저장하는 메모리	
	- [] 변수 선언이 무엇인지 설명할 수 있는가?
	A : 값을 저장할 메모리는 준비시키는 것
	- [] 데이터타입과 변수의 관계를 이해하는가?
	- [] 자바 원시 타입의 변수를 선언하고, 값을 할당할 수 있는가?
	- [] 자바 원시 타입 변수와 레퍼런스 변수의 차이점을 이해하는가?
	- [] 배열을 생성하고 배열의 각 항목의 값을 다룰 수 있는가?
	- [] 배열을 이용하여 인스턴스와 가비지를 설명할 수 있는가?






