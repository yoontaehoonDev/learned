*OOP
 - 상속 (Inheritance)
  - 기존 코드 재사용
  - 기존 코드 손대지 않고, 기능 추가

 - 캡슐화 (Encapulation)
  - 잘못된 사용을 방지하는 문법
  - 클래스를 만든 사람의 의도와 다르게 사용하는 것을 방지
  1. [접근제어] 필드 선언;
   - private int a;
  2. [접근제어] 메소드 선언;
   - private void m() { ... };

 - 다형성 (Polymarphism)
  - 프로그래밍 편의성
	
*접근 제어
 1. private - 같은 클래스의 멤버
 2. (default) - 같은 클래스의 멤버 + 같은 패키지
 3. protected - 같은 클래스의 멤버 + 같은 패키지 + 다른 패키지 + 자식 클래스
 4. public - 완전 공개

*상속 - 설계도 확장
 class Member {
	String name;
	String email;
} -> new Member() - name[] email[]

 class Student extends Member {
	String school;
	String major;
} -> new Student() - name[] email[] school[] major[]

 - Member는 super(부모) 클래스
 - Student는 sub(자식) 클래스

*다형성
 1. 다형적 변수

super 클래스 - Member [name][email][tel]
sub 클래스1 - Teacher [pay]
sub 클래스2 - Student [school][major]
sub 클래스3 - Manager [position]

Teacher t = new Teacher()
 - t[200] -- [name][email][tel] Super클래스[pay]

Student s = new Student()
 - s[300] -- [name][email][tel] Super클래스[school][major]

Manager m = new Manager()
 - m[400] -- [name][email][tel] Super클래스[position]

A 슈퍼 클래스가 현재 V1변수만 선언되어 있을 때,
A r2 레퍼런스에 r1 인스턴스[V1][V2][V4]가 치환되면
r2에서는 오직 V1변수만 사용할 수 있다.

*Overloading
 - 파라미터 타입이나 개수가 다르더라도
   같은 기능을 수행한다면, 같은 이름을 부여함으로써
   메소드 사용에 일관성을 주는 문법
 - Ex) System.out.println (오버로딩)

*Overriding
 - 상속받은 메소드를 서브 클래스 역할에 맞춰 재정의
 - 오버라이딩 문법 = super 클래스의 메소드와 똑같은 시그니처를 가져야 한다.

*추상화
 - 사람, 사물, 개념을 컴퓨터에서 다룰 수 있도록,
   클래스 문법을 이용하여 데이터와 메소드로 정의하는 것

*메소드 시그니처
 - 리턴타입 메소드명 파라미터
 - Ex : void me (int a)
 - 시그니처가 같아야 오버로딩

*ObjectList
 - 합성 (노드 포함)

UML 표기법
 - next:Node
 - prev:Node
 - board:Board -> value:Object
 - App에 있는 모든 Handler를 ObjectList를 사용할 수 있도록
   다형적 변수를 활용한다.


*extends를 설정하지 않으면 java.lang.Object 라는 클래스를 자동으로 삽입한다.
 - super 클래스를 지정하지 않으면
   컴파일러는 java.lang.Object를 super 클래스로 지정한다.

*java.lang.Object 클래스
 - toString()
   - 클래스명과 해시값을 문자열로 리턴
 - equals()
   - 인스턴스의 주소가 같은지 비교
 - hashCode() 
   - 각 인스턴스를 구분하기 위해 특별한 계산식(알고리즘)으로 생성한 수 리턴

*intern() 함수
 - 지정된 String 객체를 상수풀에서 찾고, 있으면 그 String 객체의 주소를 리턴하고
   없으면 상수풀에 String 객체를 생성한 후, 그 주소를 리턴한다.
   따라서, 있든 없든 주소는 리턴한다.

*String 클래스
 - String s = new String("hello"); -> [h][e][l][l][o] [5]<- 문자열의 Size 
 - 위 코드는, 각 byte[] 배열로 문자 코드를 저장하고, 주소값이 생성된다.
 - new없이 문자열을 넣으면, 문자열 상수풀 메모리 영역에 저장되고,
   새로 String 인스턴스를 선언할 때, 그 값이 상수풀 메모리에 있는 값과 같다면,
   그 안에 있는 주소를 넣는다. 따라서, 둘의 주소를 비교했을 때, 같다고 출력된다.

*API 문서에서 overriding 됐으면 슈퍼클래스 목록에 나오지 않는다.

 - StringBuffer는 Object에서 상속 받은 equals()를 오버라이딩 하지 않는다.
   따라서, equals로 값을 비교해도 false가 출력된다.
   StringBuffer에 있는 문자열을 비교하려면, toString() 메소드를 사용해서
   비교하면 된다. Ex) s1.toString().equals(s2.toString())

 - 필드는 오버라이딩 하지 않는다.
 - 슈퍼클래스와 서브클래스의 필드의 명을 같지 않게 한다.

 - StringBuffer = mutable (바꿀 수 있는 객체) 
  - StringBuffer 인스턴스는 한 번 선언해도 바꿀 수 있다.

 - String = immutable (바꿀 수 없는 객체)
  - String 인스턴스는 한 번 선언하면, 그 값은 절대 바뀌지 않는다.
  - 인위적으로 바꾸더라도, 새로운 인스턴스가 생기는 셈이다.

*Wrapper 클래스
 - 

*오토 박싱
 - wrapper 객체의 값을 비교할 때 == 연산자를 사용하지 말고,
   equals()를 사용해라.

*상속 문법
 - 

*상속과 생성자 호출
 - 

*super()
 - 개발자가 생성자를 정의할 때,
   super클래스의 어떤 생성자를 호출하는지 지정하지 않으면,
   super클래스의 기본 생성자를 호출하는 코드가 *생성자 첫 줄에 자동 삽입된다.

*다중상속 (Java는 지원하지 않는다.)
 - super클래스에 같은 이름의 필드 및 메소드가 존재할 때
   어떤 것을 상속 받을 것인가? -> 문법이 복잡해진다.

*Generalization 과 추상 클래스
 - 추상화(abstract)하면, 추상클래스의 인스턴스 생성 불가! 
 - 주로, Generalization 과정에서 정의 super클래스에 대해 추상 클래스로 설정한다.

*추상클래스와 일반클래스
 
*인스턴스 복제 : shallow copy, deep copy
 - Shallow Copy 는 원본에 영향이 간다.
  - 작동 방식 : 복제본을 만들고, 거기서 pop을 할 때마다 연결고리가 끊어진다.
    그 연결고리는 원본에 영향을 미치는 단점이 있다.
 - Deep Copy 는 원본에 영향이 가지 않는다.
  - 작동 방식 : 복제본을 여러 개 만들고, 새 노드들이 만들어지므로,
    가비지가 생성될 수 밖에 없다는 단점이 있지만, 원본에는 영향이 안 가는 장점이 있다.

*Iterator 디자인 패턴
 - 컨테이너에서 데이터 꺼내는 것을 캡슐화
   - 자료구조(배열, 링크드리스트, 스택, 큐, 셋, 맵 등등)에
     상관없이, 일관된 방법으로 데이터를 조회할 수 있도록
     별도의 클래스로 정의하는 설계 기법.

*추상메소드 사용 이유
 - 개발자 서브 클래스를 정의할 때 super클래스 규칙에 따라 만들도록 강제하는 효과가 있다.
 - 이터레이터를 같은 타입으로 묶는 효과가 있다.

stack.size()
변수.연산자=메소드

*Iterator 패턴 - 1
 - collection = 객체 목록을 다루는 일을 한다(Data Structure)
 - 자료구조에 따라 조회 방법이 다르다.

*Iterator 패턴 - 2
	 일관된 메소드 호출
 [Handler] - hasNext(), next() - [ListIterator] - size(), get() -[List]
 [App] - hasNext(), next() - [StackIterator] - size(), pop() - [Stack]
 [App] - hasNext(), next() - [QueueIterator] - size(), poll() - [Queue]

*Iterator 패턴 - 3
 [Handler] - hasNext(), next() - [ListIterator] - AbstractIterator -[List]
 [App] - hasNext(), next() - [StackIterator] - AbstractIterator - [Stack]
 [App] - hasNext(), next() - [QueueIterator] - AbstractIterator - [Queue]
		
 AbstractIterator [hasNext() - 값 존재 여부] [next() - 값 꺼내기]
 *상속
 1. 같은 타입이 된다.
   - 다형적 변수 문법을 이용하여 다루기 쉽다.
 2. 메소드 구현 규칙을 정의
   - 구현 방식을 통일 -> 메소드 호출 방식이 일관됨.
     - 개발자 임의로 메소드 시그니처 변경 불가

*Iterator 패턴 - 4
		[AbstractIterator] - hasNext(), next()

[ListIterator]	[StackIterator]	[QueueIterator]

 *추상클래스
  - 서브클래스에게 공통 메소드나 필드를 상속해주는 역할
 *추상메소드
  - 서브클래스에게 규칙에 따라 구현하도록 강제하는 역할
 *AbstractIterator?
  - 서브클래스에게 상속해주는 구현 메소드가 없다.
  - 단지, 구현을 강요하는 규칙만 정의되어 있다.
    이런 경우에 사용하도록 만든 문법 - 인터페이스(Interface)

 *인터페이스
  - 규칙을 정의할 때 사용하는 전문 문법
  - 추상클래스로 규칙을 정의하는 것보다 더 쉽고 유연한 문법이다.
  - 두 객체 사이의 소통 규칙
  - Ex) USB, DVI/HDMI/D-SUB
		<<interface>>
  		[AbstractIterator] - hasNext(), next()

[ListIterator]	[StackIterator]	[QueueIterator]

*추상클래스 vs 인터페이스
	추상클래스
 [AbstractIterator] [Other]
 [StackIterator]가 AbstractIterator를 상속 받으면, other 클래스를 상속받을 수 없다.

	인터페이스
 [Iterator] [Other]
 [StackIterator] Iterator와 Other 둘 다 상속 받을 수 있다.

*인터페이스 문법
 - interface 인터페이스명 {
	추상메소드;
	상수필드;
    }

 - class 클래스명
	implements 인터페이스명 {

   }


*GRASP - Creator 패턴
 - 


*중첩 클래스와 .class 파일
A.java
class A {
 	static class B {
	}
}
 - 위 코드를 컴파일하면, A.class, A$B.class 파일들이 생성됨.
 - class 블록마다 각각 따로 컴파일되어 .class 파일을 생성한다.

*Iterator 중첩 클래스


*static 멤버 vs non-static 멤버

static int a; <- static 멤버
int b; <- non-static 멤버 = 인스턴스 멤버

static void m() {
A.a = 100;
this.b = 100; <- 오류;
} - static메소드 안에서 인스턴스 멤버를 사용할 수 없다.

void x() {
A.a = 100;
this.b = 100;
} 

*static 중첩클래스 vs non-static 중첩 클래스
 1. 바깥 클래스를 보조하는 클래스로
    바깥 클래스의 인스턴스 멤버를 쓰지 않는다면, static 중첩 클래스 사용

 2. 바깥 클래스의 인스턴스 멤버를 사용한다면,
    non-static 중첩 클래스 사용

*패키지 멤버(맨 바깥 클래스)는 static 개념이 없으므로, class로만 사용한다.

*익명함수는 

*추상 클래스와 인스턴스
 - 추상 클래스는 인스턴스를 생성할 수 없다.
 - 추상 메소드는 몸체를 가질 수 없다.
 

*인터페이스 변수는 상수

*인터페이스에서 새 규칙을 추가하면,
 기존에 있던 클래스들을 모두 수정해야 하므로,
 default 키워드를 사용해서 편리성을 높인다.
 default는 강제성(규칙)이 없으므로, 수정할 필요가 없다.
 

*interface 다중 구현 불가한 경우
 - 각 인터페이스의 메소드 리턴 타입이 다를 경우


























