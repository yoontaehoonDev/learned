*예외 처리

try {
	예외를



*예외 처리를 호출자에게 위임하기

void m1() throws 예외클래스, 예외클래스, ... {
	예외 발생 코드
}

*여러 예외문 작성시
 - 자식클래스를 아래로 두고, 부모클래스를 최하위에 둔다.
    Ex) catch (IOException e) {} catch (SQLException e) {} catch (Exception e) {}


*catch 블록이 없는 try ~ finally ~ 블록을 작성하는 경우
 - 예외가 발생하면 그 처리는 호출자에게 맡긴다.
 - 그러나, 이 메소드를 호출하는 동안 사용한 자원은 이 메소드를 종료하기 전에 해제시킨다.

*RuntimeException 은 강제성이 없지만, 그래도 선언은 해두는 게 좋다.
 - SecurityException 은 RuntimeException의 하위 클래스

*포함 관계
 - 추상클래스가 타입으로 오면, 추상 클래스에서 상속 받은 서브 클래스의 객체 주소를 받는다.


*실습 프로젝트 25단계
 1. 컬렉션 객체 준비
  - 파일에서 데이터를 읽어온다.
  - VO객체를 생성하여 읽어온 데이터를 저장한다.
  - VO를 컬렉션에 담는다.
 2. 맵 객체 준비
 3. 커맨드 핸들러 준비
 4. 명령 입력 및 처리
  - 사용자로부터 명령어 입력 받기
  - 핸들러를 실행하여 명령처리
 5. 컬렉션에 보관된 VO를 파일로 출력한다.

*Board
 - 게시글 데이터를 담을 설계도
 - 사용자(개발자)정의 Data Type
 - 업무영역에서 데이터를 가리킨다.
   - Domain 객체 = Value Object(VO) = Data Transfer Object(DTO)

------------------------------------------------------------------------------

*추가
main() 시작에서 호출
 - saveBoards()
main() 끝에서 호출
 - loadBoards()




static <T extends Serializable> List<T> loadObjects(File file, Class<T> dataType) {
    // 파일에서 데이터를 읽어온다 (데이터 로딩)
    try(ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)))) {

      System.out.printf("파일 %s 로딩\n", file.getName());

      return (List<T>) in.readObject();
    } catch (Exception e) {
      System.out.printf("파일 %s 로딩 중 오류 발생\n", file.getName());
      return new ArrayList<T>();

    }
  }

파라미터로 타입 정보를 받을 때, Class로 받을 수 있다
Ex : void m(Class c) -> m(Some.class);

제네릭을 사용해서 클래스를 파라미터로 받으려면
Ex : <T> void m(Class<T> c) {} -> m(타입.class) = 

*상속을 받은 타입
 - <T extends 클래스명> void 메소드명(Class<T> c) {} -> m(상속받은 자손들.class)
   




