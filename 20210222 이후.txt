*예외 처리

try {
	예외를



*예외 처리를 호출자에게 위임하기

void m1() throws 예외클래스, 예외클래스, ... {
	예외 발생 코드
}

*여러 예외문 작성시
 - 자식클래스를 아래로 두고, 부모클래스를 최하위에 둔다.
    Ex) catch (IOException e) {} catch (SQLException e) {} catch (Exception e) {}


*catch 블록이 없는 try ~ finally ~ 블록을 작성하는 경우
 - 예외가 발생하면 그 처리는 호출자에게 맡긴다.
 - 그러나, 이 메소드를 호출하는 동안 사용한 자원은 이 메소드를 종료하기 전에 해제시킨다.

*RuntimeException 은 강제성이 없지만, 그래도 선언은 해두는 게 좋다.
 - SecurityException 은 RuntimeException의 하위 클래스

*포함 관계
 - 추상클래스가 타입으로 오면, 추상 클래스에서 상속 받은 서브 클래스의 객체 주소를 받는다.











