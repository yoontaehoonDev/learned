*예외 처리

try {
	예외를



*예외 처리를 호출자에게 위임하기

void m1() throws 예외클래스, 예외클래스, ... {
	예외 발생 코드
}

*여러 예외문 작성시
 - 자식클래스를 아래로 두고, 부모클래스를 최하위에 둔다.
    Ex) catch (IOException e) {} catch (SQLException e) {} catch (Exception e) {}


*catch 블록이 없는 try ~ finally ~ 블록을 작성하는 경우
 - 예외가 발생하면 그 처리는 호출자에게 맡긴다.
 - 그러나, 이 메소드를 호출하는 동안 사용한 자원은 이 메소드를 종료하기 전에 해제시킨다.

*RuntimeException 은 강제성이 없지만, 그래도 선언은 해두는 게 좋다.
 - SecurityException 은 RuntimeException의 하위 클래스

*포함 관계
 - 추상클래스가 타입으로 오면, 추상 클래스에서 상속 받은 서브 클래스의 객체 주소를 받는다.


*실습 프로젝트 25단계
 1. 컬렉션 객체 준비
  - 파일에서 데이터를 읽어온다.
  - VO객체를 생성하여 읽어온 데이터를 저장한다.
  - VO를 컬렉션에 담는다.
 2. 맵 객체 준비
 3. 커맨드 핸들러 준비
 4. 명령 입력 및 처리
  - 사용자로부터 명령어 입력 받기
  - 핸들러를 실행하여 명령처리
 5. 컬렉션에 보관된 VO를 파일로 출력한다.

*Board
 - 게시글 데이터를 담을 설계도
 - 사용자(개발자)정의 Data Type
 - 업무영역에서 데이터를 가리킨다.
   - Domain 객체 = Value Object(VO) = Data Transfer Object(DTO)

------------------------------------------------------------------------------

*추가
main() 시작에서 호출
 - saveBoards()
main() 끝에서 호출
 - loadBoards()




static <T extends Serializable> List<T> loadObjects(File file, Class<T> dataType) {
    // 파일에서 데이터를 읽어온다 (데이터 로딩)
    try(ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)))) {

      System.out.printf("파일 %s 로딩\n", file.getName());

      return (List<T>) in.readObject();
    } catch (Exception e) {
      System.out.printf("파일 %s 로딩 중 오류 발생\n", file.getName());
      return new ArrayList<T>();

    }
  }


파라미터로 타입 정보를 받을 때, Class로 받을 수 있다
Ex : void m(Class c) -> m(Some.class);

제네릭을 사용해서 클래스를 파라미터로 받으려면
Ex : <T> void m(Class<T> c) {} -> m(타입.class) = 


*상속을 받은 타입
 - <T extends 클래스명> void 메소드명(Class<T> c) {} -> m(상속받은 자손들.class)
   


*MIME(Multi-purpose Internet Mail Extensions) 형식은 text/csv 로 표현한다.
 - 레코드를 구성하는 필드는 콤마(,)로 구분한다.
 - Ex) a, b, c, d, e

*레코드 - 한 단위의 정보를 가리키는 용어
 - Ex) 학생정보, 도서정보
      - 학생정보 : 이름, 전화번호, 나이 등 <- 필드
 - 레코드 안에 필드가 있다.

*바이너리 포맷 - 텍스트 포맷
 - 바이너리 포맷은 그 포맷을 이해하는 전용 애플리케이션을 이용해야만 편집이 가능하다.
 - 텍스트 포맷은 메모장과 같은 텍스트 에디터가 있으면 편집이 가능하다.
*이기종

*binary 
 - 파일 크기가 작다.
 - App을 통해서만 Data 편집 가능

*CSV
 - 텍스트 형식 -> 일반적인 텍스트 편집기로 편집 가능
 - 형식이 단순
 - 각 레코드의 필드를 구분하기 어렵다.
 - 계층형으로 된 복잡한 구조의 데이터를 표헌하기 어렵다.
 Ex) 책
	- 제목
	- 작성자
		- 이름
		- 이메일
	- 출판사
		- 회사명
		- 전화
		- 팩스

*XML
 - 텍스트 형식
 - 태그를 이용하여 각 필드 값을 구분할 수 있다.
 - 계층형의 복잡한 구조의 데이터 표현이 쉽다.
 Ex) <Book>
	<title> ... </title>
	<author>
		<name> ... </name>
		<email> ... </email>
		<tel> ... </tel>
	</author>

*Json
 - 텍스트 형식
 - 태그로 필드 구분
 - 계층형 구조의 데이터 표현
 - XML에 비해 메타데이터(태그)의 양이 적다.
   - XML보다 파일 크기가 작다.
 - JavaScript 문법과 유사하다.


*XML / JSON
 - Application 끼리 데이터 교환할 때 많이 사용하는 데이터 형식
 - 특히, 이기종 간의 데이터 교환에 많이 사용

 - XML
<book>
	<title>aaa</title>
	<date>2021-3-2</date>
	<author> - 시작 태그
		<name>홍길동</name>
콘텐트 구간	<email>asdf@asdf</email>
		<tel>010-1234-1234</tel>
	</author> - 끝 태그
	<press>
		<name>출판사</name>
		<tel>02-123-1234</tel>
	</press>
</book>

*<author> ~ </author>까지 element


 - JSON
{
 "book": {
	"title":"aaa",
	"date":"2021-1-1",
	"author": {
		"name":"홍길동",
		"email":"asdf@asdf",
		"teil:"010-1234-1234"
		}
	"press": {
		"name":"출판사",
		"tel":"02-123-1234"
		}
	}
}


★ gson 다운로드 후, 적용 순서
search.maven.org
 - com.google.code.gson:gson
 - Gradle Groovy DSL 복사
 - build.gradle - 디펜던시에 추가
 - cmd - 폴더 - gradle cleanEclipse - gradle eclipse 
 - eclipse 새로 고침 후, Referenced Libraries에서 gson 파일 확인
 - 

gradle clean -> build 폴더 삭제
gradle cleanEclipse -> eclipse 관련 설정 파일 및 폴더 삭제
gradle eclipse -> 이클립스 설정 파일 및 폴더 생성















