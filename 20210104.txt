구글 git client 검색 후 윈도우 버전 다운 후, 설치
사용자 폴더 안에 git 폴더 생성

원격 git 서버의 저장소 복제하기
> git clone 주소

작업 파일을 로컬 저장소에 백업하기
> git add .

로컬 저장소에 백업
> git commit -m "백업에 대한 내용"

서버 저장소에 업로드
> git push

git 서버 저장소의 변경된 내용을 git 로컬 저장소에 다운로드 하기
> git pull




9일차
- 수업에서 사용할 git 저장소 준비
	- github 개인 저장소 생성
		- 회원가입
		- 저장소 생성
	- 로컬에 복제
		- C:\users\사용자폴더\git\bitcamp-study
	- 강의 자료 저장소 복제
		- github.com/eomcs/eomcs-docs : DB설치, 개발 도구 사용법
		- github.com/eomcs/eomcs-java :  자바 프로그래밍 기본 예제
		- github.com/eomcs/eomcs-java-web : 서블릿/JSP 프로그래밍 예제
		- github.com/eomcs/eomcs-spring-webmvc : Spring WebMVC 예제
		- github.com/eomcs/eomcs-java-project-2020 : 실습 프로젝트
		- github.com/eomcs/eomcs-java-project-2021 : 실습 프로젝트

- 프로그래밍에 대한 소개
	- 컴퓨터(CPU, RAM, HDD등) + OS + 프로그램(App) 개념
	- CPU 내부는 코어로 이루어져 있으며
	  안에는 L1, L2 메모리 존재, 공용 메모리 L3 존재
	  코어 : 명령어 처리 담당
	  L1 : 명령어 저장
	  L2 : 명령어를 처리하는 동안 데이터 저장
	  L3 : 데이터 저장
	- 메모리 : 내부 메모리
	- HDD : 외부 메모리
	*프로그램 실행 방식
	- HDD안의 notepad.exe 를 실행시키면
	  RAM에 로딩(복사)되면서 CPU로 실행할 일부 명령어를 로딩한다
	- HDD가 바로 CPU로 로딩하지 않는 이유는 읽기 속도가 느리기 때문
	- HDD에 저장된 프로그램 목록 출력 < 커맨드 라인 인터페이스

	개발자 -> 명령어(instruction) -> CPU에 맞춰서 제작
	CPU와 OS가 일치해야 프로그램 구동 가능
	CPU가 같더라도 OS가 일치하지 않으면 실행 X
	
	앱스토어에서는 명령어를 보내면 OS에 맞게 변환시켜 줌	

C/S Application = client / server 프로그램
Standalone Application = 홀로 작동하는 프로그램
Mobile app = 
- 학습 목표 달성 확인 목록
	- [] 서버 컴퓨터와 서버 프로그램의 관계를 이해하는가?
	A) 서버 컴퓨터는 클라이언트가 접속 가능하며, 서버 컴퓨터 내의 프로그램(메일, 관리 프로그램 etc) 을 실행시키면 메일을 보내거나 받을 수 있다. 
	- [] 서버 프로그램과 데스크탑 프로그램을 구분할 수 있는가?
	A) 서버 프로그램으로는 게임을 할 때, 데스크탑에 있는 프로그램을 실행시킴으로써, 온라인(서버 컴퓨터)에 접속하여 게임(서버 프로그램)에 접속한다.
	- [] 클라이언트 프로그램이 무엇인지 이해하고 있는가?
	A) 클라이언트 프로그램은 메모장이나 그림판이다. 그래서 서버 컴퓨터, 프로그램 없이도 동작이 가능하다.
	- [] 클라이언트/서버 구조로 된 애플리케이션의 예를 들 수 있는가?
	A) 온라인게임을 예로 들 수 있다. (클라이언트 앱 = Overwatch.exe / 서버 앱 = Overwatch 파일)
	- [] git 클라이언트 프로그램을 설치할 수 있는가?
	A) 구글에 git client 를 검색하고, 적절한 홈페이지에 들어가 클릭하여 다운 받아서 다른 셋팅 없이 프로그램을 설치한다.
	- [] github.com 에서 git 저장소를 생성할 수 있는가?
	A) github에 가입하고 Repository를 생성한다.
	- [] git 서버의 저장소를 로컬로 복제할 수 있는가?
	A) 로컬에 git 폴더를 생성 후, 복제. - git clone 주소
	- [] 로컬에서 작업한 파일을 로컬 저장소에 백업할 수 있는가?
	A) git add . 명령어를 통해 가능하다.
	- [] 로컬 깃 저장소에 백업한 내용을 git 서버의 저장소에 업로드할 수 있는가?
	A) git commit -m "변경 내용" -> git push 를 명령하면 된다.
	- [] 컴퓨터에서 CPU와 RAM, HDD의 관계 및 역할을 이해하고 있는가?
	A) CPU는 가장 빠른 읽기 속도를 가지고 있으며, 그 다음 RAM -> HDD 순이다.
	    HDD는 읽기 속도가 제일 느리므로, RAM에 Linking하고, RAM에서는 CPU로 Linking하여 처리한다.
	- [] OS의 역할을 대략적으로 이해하는가?
	A) 하드웨어와 소프트웨어가 정상적으로 작동할 수 있게 도와주는 시스템.
	- [] 명령어를 작성할 때 CPU와 OS에 맞춰서 작성해야 하고,
	     OS에 맞춰서 명령어를 구성해야 하는 이유를 설명할 수 있는가?
	A) 각 CPU는 처리하는 명령어가 다르고, OS 또한 실행하는 명령어가 다르기 때문에, 서로 호환이 되는 CPU와 OS가 구성되어야 한다.
	- [] 명령어를 작성할 때 컴파일러의 역할은 무엇인가?
	A) 코드를 기계어로 변환시켜주는 역할이다.
	- [] 컴파일러는 OS와 CPU에 따라 구분되는 이유를 아는가?
	A) OS와 CPU에 따라 구분되지 않으면, 실행이 되지 않기 때문이다.
	- [] 자바 컴파일러가 들어 있는 JDK를 설치할 때 OS와 CPU에 따라
	     구분해야 하는 이유를 아는가?
	A) 실행이 되지 않기 때문에 구분해야 한다.
	- [] 자바 컴파일러와 JVM의 역할을 설명할 수 있는가?
	A) 자바 컴파일러는 명령어를 바이트코드로 변환하고,
	    JVM은 OS내에서 바이트코드를 실행한다.
	- [] 소스와 바이트코드를 설명할 수 있는가?
	A) 소스는 개발자가 직접 코딩한 내용이며, 바이트코드는 소스가 컴파일 된 코드다.
	- [] 자바 컴파일러를 사용하여 소스 파일을 컴파일 할 수 있는가?
	A) 자바 컴파일러를 사용하면 class파일(바이트코드)이 생성되면서 컴파일이 된다.
	- [] JVM을 사용하여 바이트코드를 실행할 수 있는가?
	A) JVM이 설치되어 있다면, 어디에서든지 바이트코드를 실행 가능하다.
	- [] 컴파일 방식과 인터프리터 방식의 차이점을 이해하는가?
	A) 컴파일은 컴파일러가 실행되고 obj파일이 생성되고, 링커에 의해 실행 파일이 생성된다.
	    그리고 OS와 CPU에 맞춰서 따로 수행해야 한다.
	    반면에, 인터프리터는 OS별로 컴파일할 필요가 없다.
	    다만, 실행속도는 컴파일 방식에 비해 느리다.
	- [] 자바는 하이브리드 방식으로 프로그램을 개발하고 실행한다.
	     하이브리스 방식을 설명할 수 있는가?
	A) 자바 소스가 컴파일 되면서 바이트코드가 생성되고,
	    바이트코드는 JVM에 의해 바로 실행이 된다.
